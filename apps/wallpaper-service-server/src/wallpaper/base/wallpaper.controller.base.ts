/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WallpaperService } from "../wallpaper.service";
import { WallpaperCreateInput } from "./WallpaperCreateInput";
import { Wallpaper } from "./Wallpaper";
import { WallpaperFindManyArgs } from "./WallpaperFindManyArgs";
import { WallpaperWhereUniqueInput } from "./WallpaperWhereUniqueInput";
import { WallpaperUpdateInput } from "./WallpaperUpdateInput";

export class WallpaperControllerBase {
  constructor(protected readonly service: WallpaperService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Wallpaper })
  async createWallpaper(
    @common.Body() data: WallpaperCreateInput
  ): Promise<Wallpaper> {
    return await this.service.createWallpaper({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Wallpaper] })
  @ApiNestedQuery(WallpaperFindManyArgs)
  async wallpapers(@common.Req() request: Request): Promise<Wallpaper[]> {
    const args = plainToClass(WallpaperFindManyArgs, request.query);
    return this.service.wallpapers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Wallpaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wallpaper(
    @common.Param() params: WallpaperWhereUniqueInput
  ): Promise<Wallpaper | null> {
    const result = await this.service.wallpaper({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Wallpaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWallpaper(
    @common.Param() params: WallpaperWhereUniqueInput,
    @common.Body() data: WallpaperUpdateInput
  ): Promise<Wallpaper | null> {
    try {
      return await this.service.updateWallpaper({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Wallpaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWallpaper(
    @common.Param() params: WallpaperWhereUniqueInput
  ): Promise<Wallpaper | null> {
    try {
      return await this.service.deleteWallpaper({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
