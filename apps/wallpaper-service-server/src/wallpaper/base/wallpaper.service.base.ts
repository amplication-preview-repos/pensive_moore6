/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Wallpaper as PrismaWallpaper } from "@prisma/client";

export class WallpaperServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WallpaperCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wallpaper.count(args);
  }

  async wallpapers<T extends Prisma.WallpaperFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WallpaperFindManyArgs>
  ): Promise<PrismaWallpaper[]> {
    return this.prisma.wallpaper.findMany<Prisma.WallpaperFindManyArgs>(args);
  }
  async wallpaper<T extends Prisma.WallpaperFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WallpaperFindUniqueArgs>
  ): Promise<PrismaWallpaper | null> {
    return this.prisma.wallpaper.findUnique(args);
  }
  async createWallpaper<T extends Prisma.WallpaperCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WallpaperCreateArgs>
  ): Promise<PrismaWallpaper> {
    return this.prisma.wallpaper.create<T>(args);
  }
  async updateWallpaper<T extends Prisma.WallpaperUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WallpaperUpdateArgs>
  ): Promise<PrismaWallpaper> {
    return this.prisma.wallpaper.update<T>(args);
  }
  async deleteWallpaper<T extends Prisma.WallpaperDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WallpaperDeleteArgs>
  ): Promise<PrismaWallpaper> {
    return this.prisma.wallpaper.delete(args);
  }
}
