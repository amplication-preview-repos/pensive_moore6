/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Prompt as PrismaPrompt } from "@prisma/client";

export class PromptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PromptCountArgs, "select">): Promise<number> {
    return this.prisma.prompt.count(args);
  }

  async prompts<T extends Prisma.PromptFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PromptFindManyArgs>
  ): Promise<PrismaPrompt[]> {
    return this.prisma.prompt.findMany<Prisma.PromptFindManyArgs>(args);
  }
  async prompt<T extends Prisma.PromptFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PromptFindUniqueArgs>
  ): Promise<PrismaPrompt | null> {
    return this.prisma.prompt.findUnique(args);
  }
  async createPrompt<T extends Prisma.PromptCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PromptCreateArgs>
  ): Promise<PrismaPrompt> {
    return this.prisma.prompt.create<T>(args);
  }
  async updatePrompt<T extends Prisma.PromptUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PromptUpdateArgs>
  ): Promise<PrismaPrompt> {
    return this.prisma.prompt.update<T>(args);
  }
  async deletePrompt<T extends Prisma.PromptDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PromptDeleteArgs>
  ): Promise<PrismaPrompt> {
    return this.prisma.prompt.delete(args);
  }
}
